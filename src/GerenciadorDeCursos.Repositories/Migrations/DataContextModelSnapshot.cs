// <auto-generated />
using System;
using GerenciadorDeCursos.Repositories.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GerenciadorDeCursos.Repositories.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GerenciadorDeCursos.Domain.Entities.Course.CourseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FinalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InitialDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Vacancies")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("GerenciadorDeCursos.Domain.Entities.DepartmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("GerenciadorDeCursos.Domain.Entities.User.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("GerenciadorDeCursos.Domain.Entities.User.StudentEntity", b =>
                {
                    b.HasBaseType("GerenciadorDeCursos.Domain.Entities.User.UserEntity");

                    b.Property<Guid?>("CourseEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CourseEntityId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("GerenciadorDeCursos.Domain.Entities.User.TeacherEntity", b =>
                {
                    b.HasBaseType("GerenciadorDeCursos.Domain.Entities.User.UserEntity");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("GerenciadorDeCursos.Domain.Entities.Course.CourseEntity", b =>
                {
                    b.HasOne("GerenciadorDeCursos.Domain.Entities.DepartmentEntity", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GerenciadorDeCursos.Domain.Entities.User.TeacherEntity", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("GerenciadorDeCursos.Domain.Entities.User.StudentEntity", b =>
                {
                    b.HasOne("GerenciadorDeCursos.Domain.Entities.Course.CourseEntity", null)
                        .WithMany("Students")
                        .HasForeignKey("CourseEntityId");

                    b.HasOne("GerenciadorDeCursos.Domain.Entities.User.UserEntity", null)
                        .WithOne()
                        .HasForeignKey("GerenciadorDeCursos.Domain.Entities.User.StudentEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GerenciadorDeCursos.Domain.Entities.User.TeacherEntity", b =>
                {
                    b.HasOne("GerenciadorDeCursos.Domain.Entities.User.UserEntity", null)
                        .WithOne()
                        .HasForeignKey("GerenciadorDeCursos.Domain.Entities.User.TeacherEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GerenciadorDeCursos.Domain.Entities.Course.CourseEntity", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("GerenciadorDeCursos.Domain.Entities.User.TeacherEntity", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
